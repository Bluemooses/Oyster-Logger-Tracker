{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/oysterList.js","redux/reducers/inventoryReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/addOysterSaga.js","redux/sagas/adminOysters.js","redux/sagas/index.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/AboutPage/AboutPage.js","components/InfoPage/InfoPage.js","components/InputOyster/InputOyster.js","components/OysterCard/OysterCard.js","components/OysterMap/OysterMap.js","components/AdminOysterCard/AdminOysterCard.js","components/AdminInventory/AdminInventory.js","components/LandingPage/LandingPage.js","components/OysterTable/OysterModal.js","components/OysterTable/OysterTable.js","components/CurrentInventory/CurrentInventory.js","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","action","type","registrationMessage","loginMode","userReducer","payload","oysterList","inventoryList","rootReducer","errors","user","oysters","inventory","loginUser","logoutUser","loginSaga","put","config","headers","withCredentials","axios","post","console","log","response","status","takeLatest","registerUser","registrationSaga","fetchUser","userSaga","get","data","addOyster","getOysters","addToInventory","getOysterInventory","updateOysterCount","oysterInventory","id","oysterId","rootSaga","all","addOysterSaga","LoginPage","dispatch","useDispatch","useSelector","redux","useState","username","password","setUser","handleInputChangeFor","propertyName","event","target","value","className","role","onSubmit","preventDefault","htmlFor","name","onChange","onClick","RegisterPage","ProtectedRoute","props","ComponentToShow","ComponentToProtect","component","otherProps","AboutPage","InfoPage","InputOyster","oysterName","setOysterName","oysterLocation","setOysterLocation","oysterDescription","setOysterDescription","coast","setCoast","Container","Form","oysterObject","global_location","description","geo_location","alert","Field","e","placeholder","Group","inline","label","control","Button","OysterCard","oyster","Card","key","Content","Header","Meta","OysterMap","useEffect","Grid","columns","Row","streched","map","Column","open","setOpen","oysterCount","setOysterCount","Date","date","setDate","receivedDate","setReceivedDate","handleCalendarClose","handleCalendarOpen","toUTCString","toISOString","toLocaleString","ship_date","received_date","current_count","oyster_name","user_id","Modal","onClose","onOpen","trigger","image","Description","Label","selected","onCalendarClose","onCalendarOpen","Input","Actions","color","content","labelPosition","icon","positive","AdminInventory","LandingPage","history","useHistory","textAlign","fluid","as","Segment","stacked","push","OysterModal","inv","submitLastDateUsed","finalOysterSubmit","currentCount","setCurrentCount","sold","numberSold","setNumberSold","Number","OysterTable","actualYield","original_count","waste","wasteObject","last_date_used","Table","stackable","HeaderCell","d","curr_date","getDate","curr_month","getMonth","curr_year","getFullYear","rd","rd_date","rd_month","rd_year","Body","Cell","collapsing","CurrentInventory","App","exact","from","to","path","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.336bd272.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","const oysterList = (state = [{}], action) => {\r\n  switch (action.type) {\r\n    case \"SET_OYSTER_LIST\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// user will be on the redux state at:\r\n// state.user\r\nexport default oysterList;\r\n","const inventoryList = (state = [{}], action) => {\r\n  switch (action.type) {\r\n    case \"SET_INVENTORY\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// user will be on the redux state at:\r\n// state.user\r\nexport default inventoryList;\r\n","import { combineReducers } from \"redux\";\nimport errors from \"./errorsReducer\";\nimport loginMode from \"./loginModeReducer\";\nimport user from \"./userReducer\";\nimport oysters from \"./oysterList\";\nimport inventory from \"./inventoryReducer\";\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  oysters,\n  inventory,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: \"CLEAR_LOGIN_ERROR\" });\n\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post(\"/api/user/login\", action.payload, config);\n\n    // after the user has logged in\n    // get the user information from the server\n    yield put({ type: \"FETCH_USER\" });\n \n  } catch (error) {\n    console.log(\"Error with user login:\", error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: \"LOGIN_FAILED\" });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: \"LOGIN_FAILED_NO_CODE\" });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post(\"/api/user/logout\", config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: \"UNSET_USER\" });\n  } catch (error) {\n    console.log(\"Error with user logout:\", error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest(\"LOGIN\", loginUser);\n  yield takeLatest(\"LOGOUT\", logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('/api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from \"axios\";\nimport { put, takeLatest } from \"redux-saga/effects\";\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { \"Content-Type\": \"application/json\" },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get(\"/api/user\", config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: \"SET_USER\", payload: response.data });\n  } catch (error) {\n    console.log(\"User get request failed\", error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest(\"FETCH_USER\", fetchUser);\n}\n\nexport default userSaga;\n","import axios from \"axios\";\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\n\r\nfunction* addOyster(action) {\r\n  try {\r\n    const config = {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      withCredentials: true,\r\n    };\r\n\r\n    console.log(action.payload);\r\n    const response = yield axios.post(\"/api/add-oyster\", action.payload);\r\n\r\n    // now that the session has given us a user object\r\n    // with an id and username set the client-side user object to let\r\n    // the client-side code know the user is logged in\r\n    yield put({ type: \"GET_OYSTERS\" });\r\n  } catch (error) {\r\n    console.log(\"User get request failed\", error);\r\n  }\r\n}\r\n\r\nfunction* getOysters() {\r\n  try {\r\n    const response = yield axios.get(`/api/add-oyster`);\r\n    yield put({ type: \"SET_OYSTER_LIST\", payload: response.data });\r\n  } catch (error) {\r\n    console.log(\"GET OYSTER CLIENT ERR\", error);\r\n  }\r\n}\r\n\r\nfunction* userSaga() {\r\n  yield takeLatest(\"ADD_OYSTER\", addOyster);\r\n  yield takeLatest(\"GET_OYSTERS\", getOysters);\r\n}\r\n\r\nexport default userSaga;\r\n","import axios from \"axios\";\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\n\r\nfunction* addToInventory(action) {\r\n  try {\r\n    const config = {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      withCredentials: true,\r\n    };\r\n    const response = yield axios.post(\"/api/inventory\", action.payload);\r\n    yield put({ type: \"GET_OYSTER_INVENTORY\" });\r\n    // const response = yield axios.post(\"/\")\r\n  } catch (error) {\r\n    console.log(\"NEW ENTRY ERROR\");\r\n  }\r\n}\r\n\r\nfunction* getOysterInventory() {\r\n  try {\r\n    const config = {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      withCredentials: true,\r\n    };\r\n\r\n    const response = yield axios.get(`/api/inventory`, config);\r\n    console.log(response.data);\r\n    yield put({ type: \"SET_INVENTORY\", payload: response.data });\r\n    // yield put({ type: \"SET_OYSTER_LIST\", payload: response.data });\r\n  } catch (error) {\r\n    console.log(\"GET OYSTER CLIENT ERR\", error);\r\n  }\r\n}\r\n\r\nfunction* updateOysterCount(action) {\r\n  try {\r\n    console.log(action.payload);\r\n    const config = {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      withCredentials: true,\r\n    };\r\n    let id = action.payload.oysterId;\r\n    const response = yield axios.put(\r\n      `/api/inventory/update-count/${id}`,\r\n      config,\r\n      action.payload\r\n    );\r\n    console.log(response.data);\r\n    yield put({ type: \"GET_OYSTER_INVENTORY\" });\r\n    // yield put({ type: \"SET_OYSTER_LIST\", payload: response.data });\r\n  } catch (error) {\r\n    console.log(\"GET OYSTER CLIENT ERR\", error);\r\n  }\r\n}\r\n\r\nfunction* oysterInventory() {\r\n  yield takeLatest(\"ADD_TO_INVENTORY\", addToInventory);\r\n  yield takeLatest(\"GET_OYSTER_INVENTORY\", getOysterInventory);\r\n  yield takeLatest(\"UPDATE_COUNT\", updateOysterCount);\r\n}\r\n\r\nexport default oysterInventory;\r\n","import { all } from \"redux-saga/effects\";\nimport loginSaga from \"./loginSaga\";\nimport registrationSaga from \"./registrationSaga\";\nimport userSaga from \"./userSaga\";\nimport addOysterSaga from \"./addOysterSaga\";\nimport oysterInventory from \"./adminOysters\";\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    addOysterSaga(),\n    oysterInventory(),\n  ]);\n}\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const errors = useSelector((redux) => redux.errors);\n  const [user, setUser] = useState({ username: \"\", password: \"\" });\n\n  const login = (event) => {\n    event.preventDefault();\n    const { username, password } = user;\n\n    if (username && password) {\n      dispatch({\n        type: \"LOGIN\",\n        payload: {\n          username,\n          password,\n        },\n      });\n      dispatch({ type: \"GET_OYSTERS\" });\n    } else {\n      dispatch({ type: \"LOGIN_INPUT_ERROR\" });\n    }\n  }; // end login\n\n  const handleInputChangeFor = (propertyName) => (event) => {\n    console.log(propertyName);\n    setUser({\n      ...user,\n      [propertyName]: event.target.value,\n    });\n  };\n\n  return (\n    <div>\n      {errors.loginMessage && (\n        <h2 className=\"alert\" role=\"alert\">\n          {errors.loginMessage}\n        </h2>\n      )}\n      <form onSubmit={login}>\n        <h1>Login</h1>\n        <div>\n          <label htmlFor=\"username\">\n            Username:\n            <input\n              type=\"text\"\n              name=\"username\"\n              value={user.username}\n              onChange={handleInputChangeFor(\"username\")}\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"password\">\n            Password:\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={user.password}\n              onChange={handleInputChangeFor(\"password\")}\n            />\n          </label>\n        </div>\n        <div>\n          <input\n            className=\"log-in\"\n            type=\"submit\"\n            name=\"submit\"\n            value=\"Log In\"\n          />\n        </div>\n      </form>\n      <center>\n        <button\n          type=\"button\"\n          className=\"link-button\"\n          onClick={() => {\n            dispatch({ type: \"SET_TO_REGISTER_MODE\" });\n          }}\n        >\n          Register\n        </button>\n      </center>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst RegisterPage = () => {\n  const errors = useSelector((state) => state.errors)\n  const [user, setUser] = useState({ username: '', password: '' })\n  const dispatch = useDispatch();\n\n  const registerUser = (event) => {\n    event.preventDefault();\n    const { username, password } = user;\n    if (username && password) {\n      dispatch({\n        type: 'REGISTER',\n        payload: {\n          username,\n          password,\n        },\n      });\n    } else {\n      dispatch({ type: 'REGISTRATION_INPUT_ERROR' });\n    }\n  } // end registerUser\n\n  const handleInputChangeFor = propertyName => (event) => {\n    setUser({\n      ...user,\n      [propertyName]: event.target.value,\n    });\n  }\n  return (\n    <div>\n      {errors.registrationMessage && (\n        <h2\n          className=\"alert\"\n          role=\"alert\"\n        >\n          {errors.registrationMessage}\n        </h2>\n      )}\n      <form onSubmit={registerUser}>\n        <h1>Register User</h1>\n        <div>\n          <label htmlFor=\"username\">\n            Username:\n              <input\n              type=\"text\"\n              name=\"username\"\n              value={user.username}\n              onChange={handleInputChangeFor('username')}\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"password\">\n            Password:\n              <input\n              type=\"password\"\n              name=\"password\"\n              value={user.password}\n              onChange={handleInputChangeFor('password')}\n            />\n          </label>\n        </div>\n        <div>\n          <input\n            className=\"register\"\n            type=\"submit\"\n            name=\"submit\"\n            value=\"Register\"\n          />\n        </div>\n      </form>\n      <center>\n        <button\n          type=\"button\"\n          className=\"link-button\"\n          onClick={() => { dispatch({ type: 'SET_TO_LOGIN_MODE' }) }}\n        >\n          Login\n          </button>\n      </center>\n    </div>\n  );\n}\n\nexport default RegisterPage;\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {useSelector} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n\n  const user = useSelector((state) => state.user);\n  const loginMode = useSelector((state) => state.loginMode);\n\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\nexport default ProtectedRoute\n\n\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst AboutPage = () => (\n  <div>\n    <div>\n      <p>\n        This about page is for anyone to read!\n      </p>\n    </div>\n  </div>\n);\n\nexport default AboutPage;\n","import React from 'react';\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst InfoPage = () => (\n  <div>\n    <p>\n      Info Page\n    </p>\n  </div>\n);\n\nexport default InfoPage;\n","import React, { useState } from \"react\";\r\nimport { Button, Checkbox, Form, Container } from \"semantic-ui-react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./InputOyster.css\";\r\n\r\nfunction InputOyster(props) {\r\n  const [oysterName, setOysterName] = useState(\"\");\r\n  const [oysterLocation, setOysterLocation] = useState(\"\");\r\n  const [oysterDescription, setOysterDescription] = useState(\"\");\r\n  const [coast, setCoast] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n\r\n  function handleRadio(event) {\r\n    setCoast(event.target.value);\r\n    console.log(coast);\r\n  }\r\n\r\n  function addOyster(event) {\r\n    let oysterObject = {\r\n      global_location: coast,\r\n      name: oysterName,\r\n      description: oysterDescription,\r\n      geo_location: oysterLocation,\r\n    };\r\n    if (\r\n      oysterName === \"\" ||\r\n      oysterLocation === \"\" ||\r\n      oysterDescription === \"\" ||\r\n      coast === \"\"\r\n    ) {\r\n      return alert(\"Fill the form fields please\");\r\n    } else {\r\n      dispatch({ type: \"ADD_OYSTER\", payload: oysterObject });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container className=\"inputForm\">\r\n      <Form onSubmit={addOyster}>\r\n        <Form.Field>\r\n          <label>Oyster Name</label>\r\n          <input\r\n            onChange={(e) => {\r\n              setOysterName(e.target.value);\r\n            }}\r\n            placeholder=\"Oyster Name\"\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Location</label>\r\n          <input\r\n            onChange={(e) => {\r\n              setOysterLocation(e.target.value);\r\n            }}\r\n            placeholder=\"Location\"\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label>Description</label>\r\n          <input\r\n            onChange={(e) => {\r\n              setOysterDescription(e.target.value);\r\n            }}\r\n            placeholder=\"Details about taste, wine pairings, etc..\"\r\n          ></input>\r\n        </Form.Field>\r\n        <div onChange={handleRadio}>\r\n          <Form.Group inline>\r\n            <Form.Field\r\n              label=\"East Coast\"\r\n              control=\"input\"\r\n              type=\"radio\"\r\n              name=\"htmlRadios\"\r\n              value={true}\r\n            />\r\n            <Form.Field\r\n              label=\"West Coast\"\r\n              control=\"input\"\r\n              type=\"radio\"\r\n              name=\"htmlRadios\"\r\n              value={false}\r\n            />\r\n          </Form.Group>\r\n        </div>\r\n\r\n        <Button type=\"submit\">Add Oyster</Button>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default InputOyster;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button, Card, Image, Label, Grid } from \"semantic-ui-react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction OysterCard(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  let oyster = props.oyster;\r\n\r\n  return (\r\n    <Card key={oyster.id}>\r\n      <Card.Content>\r\n        <Card.Header>{oyster.name}</Card.Header>\r\n        <Card.Meta>\r\n          {oyster.global_location ? \"East Coast\" : \"West Coast\"}\r\n        </Card.Meta>\r\n        <Card.Meta>{oyster.geo_location}</Card.Meta>\r\n      </Card.Content>\r\n      <Card.Content>{oyster.description}</Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default OysterCard;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport OysterCard from \"../OysterCard/OysterCard\";\r\n\r\nexport default function OysterMap(props) {\r\n  console.log(props);\r\n  const dispatch = useDispatch();\r\n  const oysters = useSelector((redux) => redux.oysters);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: \"GET_OYSTER_INVENTORY\" });\r\n  }, []);\r\n\r\n  return (\r\n    <Grid columns=\"equal stackable\">\r\n      <Grid.Row streched=\"true\" columns={4}></Grid.Row>\r\n      {oysters.map((oyster) => {\r\n        return (\r\n          <Grid.Column>\r\n            <OysterCard oyster={oyster} />\r\n          </Grid.Column>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../AdminOysterCard/AdminOysterCard.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button, Card, Label, Modal, Form, Input } from \"semantic-ui-react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction OysterCard(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector((redux) => redux.user);\r\n\r\n  let oyster = props.oyster;\r\n  const [open, setOpen] = useState(false);\r\n  const [oysterCount, setOysterCount] = useState(0);\r\n  const [date, setDate] = useState(new Date());\r\n  const [receivedDate, setReceivedDate] = useState(new Date());\r\n\r\n  const handleCalendarClose = () => console.log(\"Calendar closed\");\r\n  const handleCalendarOpen = () => console.log(\"Calendar opened\");\r\n\r\n  function addOyster(oyster) {\r\n    console.log(date.toUTCString);\r\n    console.log(date.toISOString);\r\n    console.log(date.toLocaleString);\r\n    let oysterObject = {\r\n      ship_date: date.toUTCString(),\r\n      received_date: receivedDate.toUTCString(),\r\n      current_count: oysterCount,\r\n      oyster_name: oyster.name,\r\n      user_id: user.id,\r\n    };\r\n\r\n    dispatch({ type: \"ADD_TO_INVENTORY\", payload: oysterObject });\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <Card key={oyster.id}>\r\n      <Card.Content>\r\n        <Card.Header>{oyster.name}</Card.Header>\r\n        <Card.Meta>\r\n          {oyster.global_location ? \"East Coast\" : \"West Coast\"}\r\n        </Card.Meta>\r\n        <Card.Meta>{oyster.geo_location}</Card.Meta>\r\n      </Card.Content>\r\n      <Card.Content>{oyster.description}</Card.Content>\r\n      <Card.Content>\r\n        <Modal\r\n          onClose={() => setOpen(false)}\r\n          onOpen={() => setOpen(true)}\r\n          open={open}\r\n          trigger={<Button>Add to Inventory</Button>}\r\n        >\r\n          <Modal.Header>\r\n            Add <span className=\"oysterName\">{oyster.name}</span> to Inventory\r\n          </Modal.Header>\r\n          <Modal.Content image>\r\n            <Modal.Description>\r\n              <Form onSubmit={addOyster}>\r\n                <Form.Field>\r\n                  <Label>Shipping Date</Label>\r\n                  <DatePicker\r\n                    selected={date}\r\n                    onChange={(date) => setDate(date)}\r\n                    onCalendarClose={handleCalendarClose}\r\n                    onCalendarOpen={handleCalendarOpen}\r\n                    value={date}\r\n                  />\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <Label>Received Date</Label>\r\n                  <DatePicker\r\n                    selected={receivedDate}\r\n                    onChange={(receivedDate) => setReceivedDate(receivedDate)}\r\n                    onCalendarClose={handleCalendarClose}\r\n                    onCalendarOpen={handleCalendarOpen}\r\n                    value={receivedDate}\r\n                  />\r\n                </Form.Field>\r\n\r\n                <Form.Field>\r\n                  <Label>How Many</Label>\r\n                  <Input\r\n                    type=\"number\"\r\n                    placeholder=\"0\"\r\n                    onChange={(e) => {\r\n                      setOysterCount(e.target.value);\r\n                    }}\r\n                  />\r\n                </Form.Field>\r\n              </Form>\r\n            </Modal.Description>\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button color=\"black\" onClick={() => setOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              content=\"Add to Inventory\"\r\n              labelPosition=\"right\"\r\n              icon=\"checkmark\"\r\n              onClick={() => addOyster(oyster)}\r\n              positive\r\n            />\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default OysterCard;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport AdminOysterCard from \"../AdminOysterCard/AdminOysterCard\";\r\nfunction AdminInventory(props) {\r\n  const oysters = useSelector((redux) => redux.oysters);\r\n\r\n  return (\r\n    <Grid columns=\"equal stackable\">\r\n      <Grid.Row streched=\"true\" columns={4}></Grid.Row>\r\n      {oysters.map((oyster) => {\r\n        return (\r\n          <Grid.Column>\r\n            <AdminOysterCard oyster={oyster} />\r\n          </Grid.Column>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default AdminInventory;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Button, Header, Segment, Container } from \"semantic-ui-react\";\r\nimport \"./LandingPage.css\";\r\n\r\nexport default function LandingPage(props) {\r\n  let history = useHistory();\r\n\r\n  function goToOysterInventory() {\r\n    history.push(\"/oyster-inventory\");\r\n  }\r\n\r\n  function goToInputOyster() {\r\n    history.push(\"/add-oysters\");\r\n  }\r\n\r\n  function goToMyInventory() {\r\n    history.push(\"/my-inventory\");\r\n  }\r\n\r\n  return (\r\n    <div id=\"landingPage\">\r\n      <Container textAlign=\"center\" fluid>\r\n        <Header as=\"h2\">Oyster Hub</Header>\r\n        <Segment stacked>\r\n          <Button onClick={goToOysterInventory}>Add Oyster to Inventory</Button>\r\n          <Button onClick={goToMyInventory}>Current Inventory</Button>\r\n          <Button onClick={goToInputOyster}>Add Oyster to Database</Button>\r\n          <Button>Oyster Log</Button>\r\n          <Button>Waste Metrics</Button>\r\n        </Segment>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Image, Modal, Input, Label } from \"semantic-ui-react\";\r\n\r\nfunction OysterModal(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const oysterObject = props.inv;\r\n  const submitLastDateUsed = props.finalOysterSubmit;\r\n  const [currentCount, setCurrentCount] = useState(oysterObject.current_count);\r\n  const [numberSold, setNumberSold] = useState(oysterObject.sold);\r\n\r\n  let updateValues = {\r\n    oysterId: oysterObject.id,\r\n    current_count: currentCount,\r\n    sold: numberSold,\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      onClose={() => setOpen(false)}\r\n      onOpen={() => setOpen(true)}\r\n      open={open}\r\n      trigger={<Button>Update Oyster</Button>}\r\n    >\r\n      <Modal.Header>{oysterObject.oyster_name}</Modal.Header>\r\n      <Modal.Content>\r\n        <Input\r\n          onChange={(e) => {\r\n            setCurrentCount(Number(e.target.value));\r\n          }}\r\n          value={currentCount}\r\n          label=\"Current Count\"\r\n          type=\"number\"\r\n        ></Input>\r\n      </Modal.Content>\r\n      <Modal.Content>\r\n        <Input\r\n          value={numberSold}\r\n          onChange={(e) => setNumberSold(Number(e.target.value))}\r\n          label=\"Sold\"\r\n          type=\"number\"\r\n        ></Input>\r\n      </Modal.Content>\r\n      <Modal.Content></Modal.Content>\r\n      <Modal.Actions>\r\n        <Button\r\n          onClick={() => {\r\n            setOpen(false);\r\n          }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            setOpen(false);\r\n            submitLastDateUsed(oysterObject);\r\n          }}\r\n          positive\r\n        >\r\n          Ok\r\n        </Button>\r\n      </Modal.Actions>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default OysterModal;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"./OysterTable.css\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport { Table } from \"semantic-ui-react\";\r\nimport OysterModal from \"./OysterModal\";\r\n\r\nfunction OysterTable(props) {\r\n  //constants\r\n  const dispatch = useDispatch();\r\n  const inventory = useSelector((redux) => redux.inventory);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: \"GET_OYSTER_INVENTORY\" });\r\n  }, []);\r\n\r\n  function finalOysterSubmit(inv) {\r\n    let originalCount = inv.original_count;\r\n    let soldCount = inv.sold;\r\n    let currentCount = inv.current_count;\r\n    let actualYield = originalCount - soldCount;\r\n    let waste = actualYield - currentCount;\r\n    console.log(waste);\r\n\r\n    let wasteObject = {\r\n      waste: waste,\r\n      oyster_name: inv.oyster_name,\r\n      ship_date: inv.ship_date,\r\n      last_date_used: inv.last_date_used,\r\n      id: inv.id,\r\n      actualYield: actualYield,\r\n      original_count: inv.original_count,\r\n      received_date: inv.received_date,\r\n    };\r\n\r\n    //table needs user_id but we can pass that along with config\r\n    if (waste < 0) {\r\n      dispatch({ type: \"ROLL_OVER_WASTE\", payload: wasteObject });\r\n      /////server logic handles UPDATE SET inventory\r\n    } else {\r\n      dispatch({ type: \"LOG_OYSTER\", payload: wasteObject });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Table stackable id=\"oysterAdminTable\">\r\n      <Table.Header>\r\n        <Table.HeaderCell>Oyster Name</Table.HeaderCell>\r\n        <Table.HeaderCell>Received Date</Table.HeaderCell>\r\n        <Table.HeaderCell>Ship Date</Table.HeaderCell>\r\n        <Table.HeaderCell>Case Size</Table.HeaderCell>\r\n        <Table.HeaderCell>Count</Table.HeaderCell>\r\n        <Table.HeaderCell>Sold</Table.HeaderCell>\r\n        {/* <Table.HeaderCell>Edit</Table.HeaderCell> */}\r\n      </Table.Header>\r\n\r\n      {inventory.map((inv) => {\r\n        //handle ship date\r\n        let d = new Date(inv.ship_date);\r\n        let curr_date = d.getDate();\r\n        let curr_month = d.getMonth() + 1;\r\n        let curr_year = d.getFullYear();\r\n\r\n        //handle received datea\r\n        let rd = new Date(inv.received_date);\r\n        let rd_date = rd.getDate();\r\n        let rd_month = rd.getMonth() + 1;\r\n        let rd_year = rd.getFullYear();\r\n\r\n        //begin render\r\n        return (\r\n          <Table.Body>\r\n            <Table.Row>\r\n              <Table.Cell>{inv.oyster_name}</Table.Cell>\r\n              <Table.Cell>\r\n                {rd_month}/{rd_date}/{rd_year}\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                {curr_month}/{curr_date}/{curr_year}\r\n              </Table.Cell>\r\n              <Table.Cell>{inv.original_count}</Table.Cell>\r\n              <Table.Cell>{inv.current_count}</Table.Cell>\r\n              <Table.Cell>{inv.sold}</Table.Cell>\r\n              <Table.Cell collapsing>\r\n                <OysterModal\r\n                  rd_month={rd_month}\r\n                  rd_date={rd_date}\r\n                  rd_year={rd_year}\r\n                  curr_month={curr_month}\r\n                  curr_date={curr_date}\r\n                  curr_year={curr_year}\r\n                  finalOysterSubmit={finalOysterSubmit}\r\n                  inv={inv}\r\n                ></OysterModal>\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          </Table.Body>\r\n        );\r\n      })}\r\n    </Table>\r\n  ); //end render\r\n} //end OysterTable\r\n\r\nexport default OysterTable;\r\n","import React from \"react\";\r\nimport OysterTable from \"../OysterTable/OysterTable\";\r\n\r\nexport default function CurrentInventory(props) {\r\n  return <OysterTable />;\r\n}\r\n","import React, { useEffect } from \"react\";\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport ProtectedRoute from \"../ProtectedRoute/ProtectedRoute\";\n\nimport AboutPage from \"../AboutPage/AboutPage\";\nimport InfoPage from \"../InfoPage/InfoPage\";\nimport InputOyster from \"../InputOyster/InputOyster\";\nimport OysterMap from \"../OysterMap/OysterMap\";\nimport AdminInventory from \"../AdminInventory/AdminInventory\";\n\nimport \"./App.css\";\nimport LandingPage from \"../LandingPage/LandingPage\";\nimport OysterTable from \"../OysterTable/OysterTable\";\nimport CurrentInventory from \"../CurrentInventory/CurrentInventory\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const user = useSelector((redux) => redux.user);\n\n  useEffect(() => {\n    dispatch({ type: \"FETCH_USER\" });\n    dispatch({ type: \"GET_OYSTERS\" });\n  }, []);\n\n  return (\n    <Router>\n      <LandingPage />\n      <div>\n        <Switch>\n          {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n          {user.id ? (\n            <Redirect exact from=\"/\" to=\"oyster-inventory\" />\n          ) : (\n            <Redirect exact from=\"/\" to=\"/oysters\" />\n          )}\n          {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n          <Route exact path=\"/about\" component={AboutPage} />\n          <Route exact path=\"/oysters\" component={OysterMap} />\n          {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n          <ProtectedRoute exact path=\"/home\" component={LandingPage} />\n          {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n          <ProtectedRoute exact path=\"/info\" component={InfoPage} />\n          <ProtectedRoute exact path=\"/add-oysters\" component={InputOyster} />\n          <ProtectedRoute\n            exact\n            path=\"/oyster-inventory\"\n            component={AdminInventory}\n          />\n          <ProtectedRoute\n            exact\n            path=\"/my-inventory\"\n            component={CurrentInventory}\n          />\n          {/* If none of the other routes matched, we will show a 404. */}\n          <Route render={() => <h1>404</h1>} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport ReactDOM from \"react-dom\";\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport logger from \"redux-logger\";\n\nimport rootReducer from \"./redux/reducers\"; // imports ./redux/reducers/index.js\nimport rootSaga from \"./redux/sagas\"; // imports ./redux/sagas/index.js\n\nimport App from \"./components/App/App\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList =\n  process.env.NODE_ENV === \"development\"\n    ? [sagaMiddleware, logger]\n    : [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList)\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"react-root\")\n);\n"],"sourceRoot":""}